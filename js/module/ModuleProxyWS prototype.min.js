class ProxyWS{constructor(_wss){this._WSS=_wss,this._Queue=[],this.name="ProxyWS",this._SubID={},this._QueueCallbackBind=this.QueueCallback.bind(this),Object.on("repl-sub",(id,key)=>{this._WSS.clients.filter(client=>client.key.hashed===key).forEach(client=>{client.regServices.includes("repl")||client.regServices.push("repl")}),this._SubID[id]||(this._SubID[id]=key)}),Object.on("sensor-sub",(id,key)=>{this._WSS.clients.filter(client=>client.key.hashed===key).forEach(client=>{client.regServices.includes("sensor")||client.regServices.push("sensor")}),this._SubID[id]||(this._SubID[id]=key)}),Object.on("process-sub",(id,key)=>{this._WSS.clients.filter(client=>client.key.hashed===key).forEach(client=>{client.regServices.includes("process")||client.regServices.push("process")}),this._SubID[id]||(this._SubID[id]=key)}),Object.on("repl-read",msg=>{this.Send(this.FormPackREPL(msg))}),Object.on("sensor-read",msg=>{this.Send(this.FormPackSensor(msg))}),Object.on("process-read",msg=>{})}Receive(_data,_key){let obj=null;try{obj=JSON.parse(_data)}catch(e){throw new err("Incorrect JSON data")}let key=_key,meta_crc=obj.MetaData.CRC,actual_crc;if(delete obj.MetaData.CRC,E.CRC32(JSON.stringify(obj))===meta_crc){let flag=!0;obj.MetaData.Command.forEach(comObj=>{flag&&(comObj.com.endsWith("sub")||comObj.com.endsWith("cm")?(Object.emit(comObj.com,obj.MetaData.ID,key),flag=!1):Object.emit(comObj.com,comObj.arg,obj.MetaData.ID))})}}Send(msg){0===this._Queue.length?this._WSS.Notify(msg,this._QueueCallbackBind):this._Queue.push(msg)}QueueCallback(e){if(e)throw new err("Some error in Send");if(this._Queue.length){let msg=this._Queue.shift();this._WSS.Notify(msg)}}RemoveSub(key){let i=0;for(const k in this._Sub)i=this._Sub[k].indexOf(key),-1!==i&&this._Sub[k].splice(i,1);for(let k of this._SubID)this._SubID[k]===key&&delete this._SubID[k];0===this._Sub.repl.length&&Object.emit("repl-cm","EWI")}FormPackREPL(msg){let pack={MetaData:{Type:"controller",ID:process.env.SERIAL,TimeStamp2:getTime(),Repl:{com:""},RegServices:"repl"},Value:msg};return pack}FormPackSensor(msg){let pack={MetaData:{Type:"controller",ID:process.env.SERIAL,TimeStamp2:getTime(),RegServices:"sensor",Sensor:{ID:"54-54",Name:"Vova",Type:"meas",TypeOutSignal:"analog",TypeInSignal:"analog",NumPortsRequired:[1],NumChannel:1,Bus:["i2c"]}},Value:msg};return pack}}exports=ProxyWS;