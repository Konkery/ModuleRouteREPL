class ProxyWS{constructor(_wss){this._WSS=_wss,this._Subs={repl:[],sensor:[],process:[]},this.name="ProxyWS",this._SubsID={},Object.on("repl-sub",(id,key)=>{this._Subs.repl.push(key),this._SubsID[id]||(this._SubsID[id]=key)}),Object.on("sensor-sub",key=>{this._Subs.sensor.push(key),this._SubsID[id]||(this._SubsID[id]=key)}),Object.on("process-sub",key=>{this._Subs.process.push(key),this._SubsID[id]||(this._SubsID[id]=key)}),Object.on("repl-read",msg=>{this.Send(this.FormPackREPL(msg),this._Subs.repl)}),Object.on("sensor-read",msgs=>{this.Send(this.FormPackSensor(msgs),this._Subs.sensor)}),Object.on("process-read",msg=>{})}Receive(_data,_key){let obj=null;try{obj=JSON.parse(_data)}catch(e){throw new err("Incorrect JSON data")}console.log(obj);let key=_key,meta_crc=obj.MetaData.CRC,actual_crc;if(delete obj.MetaData.CRC,E.CRC32(JSON.stringify(obj))===meta_crc){let flag=!0;obj.MetaData.Command.forEach(comObj=>{flag&&(comObj.com.endsWith("sub")||comObj.com.endsWith("cm")?(Object.emit(comObj.com,obj.MetaData.ID,key),flag=!1,console.log("emited")):Object.emit(comObj.com,comObj.arg,obj.MetaData.ID))})}}Send(msg,keys){this._WSS.Notify(msg,keys)}RemoveSub(key){Object.values(this._Subs).forEach(subs=>{let i=subs.indexOf(key);-1!==key&&subs.splice(i,1)}),Object.entries(this._SubsID).forEach(pair=>{pair[1]===key&&delete this._SubsID[pair[0]]}),0===this._Subs.repl.length&&Object.emit("repl-cm","EWI")}FormPackREPL(msg){return JSON.stringify({Metadata:{Type:"controller",ID:process.env.BOARD,TimeStamp2:~~getTime(),Repl:{com:msg}}})}FormPackSensor(msg){return{Metadata:{Type:"controller",Sensor:{Name:msg.name}},Value:msg.value}}}exports=ProxyWS;