class ClassEsp8266WiFi{constructor(_rx,_tx){if(this.Instance)return this.Instance;ClassEsp8266WiFi.prototype.Instance=this,this._name="ClassEsp8266WiFi",this._wifi=void 0,this._bus=void 0,this._ssid=void 0,this._ip=void 0,this.Init(_rx,_tx)}InitBus(_rx,_tx){if(_rx&&_tx){let bus_class=new UARTBus,opt={rx:_rx,tx:_tx,baud:115200};this._bus=bus_class.AddBus(opt)}}Init(_rx,_tx){if(process.env.MODULES.includes("Wifi")){let pass;this._wifi=require("Wifi"),this._wifi.scan((err,aps)=>{if(err)throw err;{let s=require("Storage");if(!s.list().includes("APs.json"))throw"No JSON file found!";let found=aps.map(a=>a.ssid),wrt=s.readJSON("APs.json",!0);found.forEach(fName=>{wrt.forEach(sName=>{fName==sName.ssid&&(this._ssid=sName.ssid,pass=sName.pass)})}),this._wifi.connect(this.ssid,{password:pass},err=>{if(err)throw err;this._wifi.getIP((err,info)=>{if(err)throw err;this._ip=info.ip})})}})}else{let pass;this._wifi=require("https://raw.githubusercontent.com/AlexGlgr/ModuleMiddleWIFIesp8266/fork-Alexander/js/module/ClassBaseWIFIesp8266.min.js").setup(Serial3,err=>{if(err)throw err;this._wifi.getAPs((err,aps)=>{if(err)throw err;{let s=require("Storage");if(!s.list().includes("APs.json"))throw"No JSON file found!";let found=aps.map(a=>a.ssid),wrt=s.readJSON("APs.json",!0);found.forEach(fName=>{wrt.forEach(sName=>{fName==sName.ssid&&(this._ssid=sName.ssid,pass=sName.pass)})}),this._wifi.connect(this._ssid,pass,err=>{if(err)throw err;this._wifi.getIP((emsg,ipAdress)=>{if(emsg)throw err;this._ip=ipAdress})})}})})}}}exports=ClassEsp8266WiFi,require("Wifi").scan((err,aplist)=>{console.log(aplist)});