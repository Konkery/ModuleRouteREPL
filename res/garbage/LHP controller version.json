{ 
    "TimeStamp":    122465768,
    "MetaData":     {   /* Type - идентификатор типа протокола контроллер/клиент */              
                        "Type":"controller",
                        
                        /* ID - идентификатор модуля контроллера (уникальный) */
                        "ID": "cc50e35a-a916",
                        
                        /* TimeStamp2 - временная метка полученная вызовом глобальной функции Espruino - getTime() */
                        "TimeStamp2": 122465768.32423,
                        
                        /* RegServices - поле определяющее от какой службы поступили данные для передачи клиенту */
                        "RegServices": "Sensor",
                        
                        /* 
                           Sensor - поле хранит прикладные данные соответствующей системной службы.
                           Поля LHP пакета хранящие прикладные данные являются взаимоисключающе, т.е. одновременно
                           в пакете LHP может быть либо Sensor, либо Process, либо Repl, либо данные иной службы
                        */
                        "Sensor": {
                            "ID": "XX-XXX-XXXX-Y",
                            "com": "",
                            "arg": []
                        }, 
                        
                        /* 
                            Process - поле хранит прикладные данные соответствующей системной службы.
                            Поля LHP пакета хранящие прикладные данные являются взаимоисключающе, т.е. одновременно
                            в пакете LHP может быть либо Sensor, либо Process, либо Repl, либо данные иной службы
                        */
                        "Process": {
                            "com":          "get-time",
                            "arg":          []
                        }, //поле взаимоисключающее с Sensor, Repl и др определяющими имя службы
                        
                        /* 
                            Repl - поле хранит прикладные данные соответствующей системной службы.
                            Поля LHP пакета хранящие прикладные данные являются взаимоисключающе, т.е. одновременно
                            в пакете LHP может быть либо Sensor, либо Process, либо Repl, либо данные иной службы
                        */
                        "Repl": {
                            "com": "",
                            "arg": []
                        },

                        /* CRC - поле хранит контрольную сумму всего пакета LHP, за исключением самого поля  CRC */
                        "CRC": 123123414
                    },
    /*
        Value - поле хранит прикладное значение передаваемое в данном LHP пакете. Тип передаваемого значения может иметь
        только два варианта: Number/String.
        Для сенсоров возвращающих числовое значение это поле будет содержать текущее значение сенсора. Для других вариантов
        поле будет содержать сериализованное значение отдаваемое службой. Например запрос сетевых параметров к Process приведет
        к возврату объекта с несколькими полями:
            ip - IP address as string (e.g. "192.168.1.5")
            netmask - The interface netmask as string (ESP8266/ESP32 only)
            gw - The network gateway as string (ESP8266/ESP32 only)
            mac - The MAC address as string of the form 00:00:00:00:00:00
        после получения значения, служба, в данном случае Process должна сериализировать объект с данными и передать его как 
        значение поля Value, преобразовав объект в строку, которая в дальнейшем будет восстановлена в объект на стороне Node-Red.
    */
    "Value":        25
}
/*
    Общие замечания к протоколу.
    Для исключения некорректной обработки сериализованных данных LHP пакета необходимо выполнять процедуру кодирования/декодирования
    как всего пакета при отправке, так и некоторых полей пакета LHP данные которых передаются в сериализованном виде.
    Примером может служить поле Value в том случае если оно содержит тип данных String. Причем делать это безусловно, даже в том случае
    когда Value потенциально содержит допустимое текстовое значение например MAC адрес wifi модуля.
    Для этого необходимо задействовать 4 команды:
        - JSON.stringify( <obj> )       - команда сериализации объекта
        - encodeURIComponent( <str> )   - команда кодирования сериализованного объекта
        - decodeURIComponent( <str> )   - команда декодирования кодированной строки
        - JSON.parse( <str> )           - команда преобразования строки JSON в объект
*/
